// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ERRORssGP
Rcpp::DataFrame ERRORssGP(Rcpp::List baselineParams, Rcpp::List unsampledPopParams, Rcpp::List missingParams, Rcpp::List genotypeKey, Rcpp::List genotypeErrorRates, Rcpp::NumericVector llrToTest, int N, int seed, double MIexcludeProb, int maxMissingGenos);
RcppExport SEXP _gRandma_ERRORssGP(SEXP baselineParamsSEXP, SEXP unsampledPopParamsSEXP, SEXP missingParamsSEXP, SEXP genotypeKeySEXP, SEXP genotypeErrorRatesSEXP, SEXP llrToTestSEXP, SEXP NSEXP, SEXP seedSEXP, SEXP MIexcludeProbSEXP, SEXP maxMissingGenosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type baselineParams(baselineParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type unsampledPopParams(unsampledPopParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type missingParams(missingParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeKey(genotypeKeySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeErrorRates(genotypeErrorRatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type llrToTest(llrToTestSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type MIexcludeProb(MIexcludeProbSEXP);
    Rcpp::traits::input_parameter< int >::type maxMissingGenos(maxMissingGenosSEXP);
    rcpp_result_gen = Rcpp::wrap(ERRORssGP(baselineParams, unsampledPopParams, missingParams, genotypeKey, genotypeErrorRates, llrToTest, N, seed, MIexcludeProb, maxMissingGenos));
    return rcpp_result_gen;
END_RCPP
}
// falseNeg_ERRORsP
Rcpp::DataFrame falseNeg_ERRORsP(Rcpp::List baselineParams, Rcpp::List unsampledPopParams, Rcpp::List missingParams, Rcpp::List genotypeKey, Rcpp::List genotypeErrorRates, Rcpp::NumericVector llrToTest, int N, int seed, double MIexcludeProb);
RcppExport SEXP _gRandma_falseNeg_ERRORsP(SEXP baselineParamsSEXP, SEXP unsampledPopParamsSEXP, SEXP missingParamsSEXP, SEXP genotypeKeySEXP, SEXP genotypeErrorRatesSEXP, SEXP llrToTestSEXP, SEXP NSEXP, SEXP seedSEXP, SEXP MIexcludeProbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type baselineParams(baselineParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type unsampledPopParams(unsampledPopParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type missingParams(missingParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeKey(genotypeKeySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeErrorRates(genotypeErrorRatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type llrToTest(llrToTestSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type MIexcludeProb(MIexcludeProbSEXP);
    rcpp_result_gen = Rcpp::wrap(falseNeg_ERRORsP(baselineParams, unsampledPopParams, missingParams, genotypeKey, genotypeErrorRates, llrToTest, N, seed, MIexcludeProb));
    return rcpp_result_gen;
END_RCPP
}
// strat_otherPopERRORssGP
Rcpp::List strat_otherPopERRORssGP(Rcpp::List baselineParams, Rcpp::List unsampledPopParams, Rcpp::List missingParams, Rcpp::List genotypeKey, Rcpp::List genotypeErrorRates, Rcpp::NumericVector llrToTest, Rcpp::NumericVector itersPerMI, int seed, Rcpp::NumericVector skipBaseline, double MIexcludeProb, int maxMissingGenos);
RcppExport SEXP _gRandma_strat_otherPopERRORssGP(SEXP baselineParamsSEXP, SEXP unsampledPopParamsSEXP, SEXP missingParamsSEXP, SEXP genotypeKeySEXP, SEXP genotypeErrorRatesSEXP, SEXP llrToTestSEXP, SEXP itersPerMISEXP, SEXP seedSEXP, SEXP skipBaselineSEXP, SEXP MIexcludeProbSEXP, SEXP maxMissingGenosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type baselineParams(baselineParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type unsampledPopParams(unsampledPopParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type missingParams(missingParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeKey(genotypeKeySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeErrorRates(genotypeErrorRatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type llrToTest(llrToTestSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type itersPerMI(itersPerMISEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type skipBaseline(skipBaselineSEXP);
    Rcpp::traits::input_parameter< double >::type MIexcludeProb(MIexcludeProbSEXP);
    Rcpp::traits::input_parameter< int >::type maxMissingGenos(maxMissingGenosSEXP);
    rcpp_result_gen = Rcpp::wrap(strat_otherPopERRORssGP(baselineParams, unsampledPopParams, missingParams, genotypeKey, genotypeErrorRates, llrToTest, itersPerMI, seed, skipBaseline, MIexcludeProb, maxMissingGenos));
    return rcpp_result_gen;
END_RCPP
}
// sP
Rcpp::DataFrame sP(Rcpp::NumericMatrix baseline, Rcpp::NumericMatrix mixture, Rcpp::List baselineParams, Rcpp::List unsampledPopParams, Rcpp::List genotypeKey, Rcpp::List genotypeErrorRates, double saveLLR, double MIexcludeProb, bool filterLLR);
RcppExport SEXP _gRandma_sP(SEXP baselineSEXP, SEXP mixtureSEXP, SEXP baselineParamsSEXP, SEXP unsampledPopParamsSEXP, SEXP genotypeKeySEXP, SEXP genotypeErrorRatesSEXP, SEXP saveLLRSEXP, SEXP MIexcludeProbSEXP, SEXP filterLLRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type baseline(baselineSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mixture(mixtureSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type baselineParams(baselineParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type unsampledPopParams(unsampledPopParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeKey(genotypeKeySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeErrorRates(genotypeErrorRatesSEXP);
    Rcpp::traits::input_parameter< double >::type saveLLR(saveLLRSEXP);
    Rcpp::traits::input_parameter< double >::type MIexcludeProb(MIexcludeProbSEXP);
    Rcpp::traits::input_parameter< bool >::type filterLLR(filterLLRSEXP);
    rcpp_result_gen = Rcpp::wrap(sP(baseline, mixture, baselineParams, unsampledPopParams, genotypeKey, genotypeErrorRates, saveLLR, MIexcludeProb, filterLLR));
    return rcpp_result_gen;
END_RCPP
}
// ssGP
Rcpp::DataFrame ssGP(Rcpp::NumericMatrix baseline, Rcpp::NumericMatrix mixture, Rcpp::NumericMatrix crossRecords, Rcpp::List baselineParams, Rcpp::List unsampledPopParams, Rcpp::List genotypeKey, Rcpp::List genotypeErrorRates, double saveLLR, double MIexcludeProb, bool filterLLR);
RcppExport SEXP _gRandma_ssGP(SEXP baselineSEXP, SEXP mixtureSEXP, SEXP crossRecordsSEXP, SEXP baselineParamsSEXP, SEXP unsampledPopParamsSEXP, SEXP genotypeKeySEXP, SEXP genotypeErrorRatesSEXP, SEXP saveLLRSEXP, SEXP MIexcludeProbSEXP, SEXP filterLLRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type baseline(baselineSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mixture(mixtureSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type crossRecords(crossRecordsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type baselineParams(baselineParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type unsampledPopParams(unsampledPopParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeKey(genotypeKeySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeErrorRates(genotypeErrorRatesSEXP);
    Rcpp::traits::input_parameter< double >::type saveLLR(saveLLRSEXP);
    Rcpp::traits::input_parameter< double >::type MIexcludeProb(MIexcludeProbSEXP);
    Rcpp::traits::input_parameter< bool >::type filterLLR(filterLLRSEXP);
    rcpp_result_gen = Rcpp::wrap(ssGP(baseline, mixture, crossRecords, baselineParams, unsampledPopParams, genotypeKey, genotypeErrorRates, saveLLR, MIexcludeProb, filterLLR));
    return rcpp_result_gen;
END_RCPP
}
// strat_ERRORsP
Rcpp::List strat_ERRORsP(Rcpp::List baselineParams, Rcpp::List unsampledPopParams, Rcpp::List missingParams, Rcpp::List genotypeKey, Rcpp::List genotypeErrorRates, Rcpp::NumericVector llrToTest, Rcpp::NumericVector itersPerMI, int seed, int trueRel, double MIexcludeProb);
RcppExport SEXP _gRandma_strat_ERRORsP(SEXP baselineParamsSEXP, SEXP unsampledPopParamsSEXP, SEXP missingParamsSEXP, SEXP genotypeKeySEXP, SEXP genotypeErrorRatesSEXP, SEXP llrToTestSEXP, SEXP itersPerMISEXP, SEXP seedSEXP, SEXP trueRelSEXP, SEXP MIexcludeProbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type baselineParams(baselineParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type unsampledPopParams(unsampledPopParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type missingParams(missingParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeKey(genotypeKeySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeErrorRates(genotypeErrorRatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type llrToTest(llrToTestSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type itersPerMI(itersPerMISEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type trueRel(trueRelSEXP);
    Rcpp::traits::input_parameter< double >::type MIexcludeProb(MIexcludeProbSEXP);
    rcpp_result_gen = Rcpp::wrap(strat_ERRORsP(baselineParams, unsampledPopParams, missingParams, genotypeKey, genotypeErrorRates, llrToTest, itersPerMI, seed, trueRel, MIexcludeProb));
    return rcpp_result_gen;
END_RCPP
}
// strat_ERRORssGP
Rcpp::List strat_ERRORssGP(Rcpp::List baselineParams, Rcpp::List unsampledPopParams, Rcpp::List missingParams, Rcpp::List genotypeKey, Rcpp::List genotypeErrorRates, Rcpp::NumericVector llrToTest, Rcpp::NumericVector itersPerMI, int seed, int trueRel, double MIexcludeProb, int maxMissingGenos);
RcppExport SEXP _gRandma_strat_ERRORssGP(SEXP baselineParamsSEXP, SEXP unsampledPopParamsSEXP, SEXP missingParamsSEXP, SEXP genotypeKeySEXP, SEXP genotypeErrorRatesSEXP, SEXP llrToTestSEXP, SEXP itersPerMISEXP, SEXP seedSEXP, SEXP trueRelSEXP, SEXP MIexcludeProbSEXP, SEXP maxMissingGenosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type baselineParams(baselineParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type unsampledPopParams(unsampledPopParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type missingParams(missingParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeKey(genotypeKeySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeErrorRates(genotypeErrorRatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type llrToTest(llrToTestSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type itersPerMI(itersPerMISEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type trueRel(trueRelSEXP);
    Rcpp::traits::input_parameter< double >::type MIexcludeProb(MIexcludeProbSEXP);
    Rcpp::traits::input_parameter< int >::type maxMissingGenos(maxMissingGenosSEXP);
    rcpp_result_gen = Rcpp::wrap(strat_ERRORssGP(baselineParams, unsampledPopParams, missingParams, genotypeKey, genotypeErrorRates, llrToTest, itersPerMI, seed, trueRel, MIexcludeProb, maxMissingGenos));
    return rcpp_result_gen;
END_RCPP
}
// strat_otherPopERRORsP
Rcpp::List strat_otherPopERRORsP(Rcpp::List baselineParams, Rcpp::List unsampledPopParams, Rcpp::List missingParams, Rcpp::List genotypeKey, Rcpp::List genotypeErrorRates, Rcpp::NumericVector llrToTest, Rcpp::NumericVector itersPerMI, int seed, Rcpp::NumericVector skipBaseline, double MIexcludeProb);
RcppExport SEXP _gRandma_strat_otherPopERRORsP(SEXP baselineParamsSEXP, SEXP unsampledPopParamsSEXP, SEXP missingParamsSEXP, SEXP genotypeKeySEXP, SEXP genotypeErrorRatesSEXP, SEXP llrToTestSEXP, SEXP itersPerMISEXP, SEXP seedSEXP, SEXP skipBaselineSEXP, SEXP MIexcludeProbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type baselineParams(baselineParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type unsampledPopParams(unsampledPopParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type missingParams(missingParamsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeKey(genotypeKeySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type genotypeErrorRates(genotypeErrorRatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type llrToTest(llrToTestSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type itersPerMI(itersPerMISEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type skipBaseline(skipBaselineSEXP);
    Rcpp::traits::input_parameter< double >::type MIexcludeProb(MIexcludeProbSEXP);
    rcpp_result_gen = Rcpp::wrap(strat_otherPopERRORsP(baselineParams, unsampledPopParams, missingParams, genotypeKey, genotypeErrorRates, llrToTest, itersPerMI, seed, skipBaseline, MIexcludeProb));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gRandma_ERRORssGP", (DL_FUNC) &_gRandma_ERRORssGP, 10},
    {"_gRandma_falseNeg_ERRORsP", (DL_FUNC) &_gRandma_falseNeg_ERRORsP, 9},
    {"_gRandma_strat_otherPopERRORssGP", (DL_FUNC) &_gRandma_strat_otherPopERRORssGP, 11},
    {"_gRandma_sP", (DL_FUNC) &_gRandma_sP, 9},
    {"_gRandma_ssGP", (DL_FUNC) &_gRandma_ssGP, 10},
    {"_gRandma_strat_ERRORsP", (DL_FUNC) &_gRandma_strat_ERRORsP, 10},
    {"_gRandma_strat_ERRORssGP", (DL_FUNC) &_gRandma_strat_ERRORssGP, 11},
    {"_gRandma_strat_otherPopERRORsP", (DL_FUNC) &_gRandma_strat_otherPopERRORsP, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_gRandma(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
